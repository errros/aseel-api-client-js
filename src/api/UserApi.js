/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import HTTPValidationError from '../model/HTTPValidationError';
import RatingSchema from '../model/RatingSchema';

/**
* User service.
* @module api/UserApi
* @version 0.1.0
*/
export default class UserApi {

    /**
    * Constructs a new UserApi. 
    * @alias module:api/UserApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getUrlPlaylistsApiV1UserUrlUrlCodeGet operation.
     * @callback module:api/UserApi~getUrlPlaylistsApiV1UserUrlUrlCodeGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Url Playlists
     * @param {String} urlCode 
     * @param {module:api/UserApi~getUrlPlaylistsApiV1UserUrlUrlCodeGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getUrlPlaylistsApiV1UserUrlUrlCodeGet(urlCode, callback) {
      let postBody = null;
      // verify the required parameter 'urlCode' is set
      if (urlCode === undefined || urlCode === null) {
        throw new Error("Missing the required parameter 'urlCode' when calling getUrlPlaylistsApiV1UserUrlUrlCodeGet");
      }

      let pathParams = {
        'url_code': urlCode
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/user/url/{url_code}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUserRatingApiV1UserPlaylistSpotifyPlaylistIdRatingGet operation.
     * @callback module:api/UserApi~getUserRatingApiV1UserPlaylistSpotifyPlaylistIdRatingGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get User Rating
     * @param {String} spotifyPlaylistId 
     * @param {module:api/UserApi~getUserRatingApiV1UserPlaylistSpotifyPlaylistIdRatingGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getUserRatingApiV1UserPlaylistSpotifyPlaylistIdRatingGet(spotifyPlaylistId, callback) {
      let postBody = null;
      // verify the required parameter 'spotifyPlaylistId' is set
      if (spotifyPlaylistId === undefined || spotifyPlaylistId === null) {
        throw new Error("Missing the required parameter 'spotifyPlaylistId' when calling getUserRatingApiV1UserPlaylistSpotifyPlaylistIdRatingGet");
      }

      let pathParams = {
        'spotify_playlist_id': spotifyPlaylistId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/user/playlist/{spotify_playlist_id}/rating', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the rateOrUpdateRatingApiV1UserPlaylistSpotifyPlaylistIdRatePost operation.
     * @callback module:api/UserApi~rateOrUpdateRatingApiV1UserPlaylistSpotifyPlaylistIdRatePostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Rate Or Update Rating
     * @param {String} spotifyPlaylistId 
     * @param {module:model/RatingSchema} ratingSchema 
     * @param {module:api/UserApi~rateOrUpdateRatingApiV1UserPlaylistSpotifyPlaylistIdRatePostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    rateOrUpdateRatingApiV1UserPlaylistSpotifyPlaylistIdRatePost(spotifyPlaylistId, ratingSchema, callback) {
      let postBody = ratingSchema;
      // verify the required parameter 'spotifyPlaylistId' is set
      if (spotifyPlaylistId === undefined || spotifyPlaylistId === null) {
        throw new Error("Missing the required parameter 'spotifyPlaylistId' when calling rateOrUpdateRatingApiV1UserPlaylistSpotifyPlaylistIdRatePost");
      }
      // verify the required parameter 'ratingSchema' is set
      if (ratingSchema === undefined || ratingSchema === null) {
        throw new Error("Missing the required parameter 'ratingSchema' when calling rateOrUpdateRatingApiV1UserPlaylistSpotifyPlaylistIdRatePost");
      }

      let pathParams = {
        'spotify_playlist_id': spotifyPlaylistId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/user/playlist/{spotify_playlist_id}/rate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
